{"ast":null,"code":"var _jsxFileName = \"/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { isWinner } from \"../helper\";\nimport { NO_PLAYER, PLAYER_1, PLAYER_2, CIRCLE_NUM, GAME_STATE_PLAYING } from \"../Constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [gameBoard, setGameBoard] = React.useState(Array(16).fill(NO_PLAYER));\n  const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n  const [gameState, setGameState] = React.useState(GAME_STATE_PLAYING);\n  const initBoard = () => {\n    const circles = [];\n    for (let i = 0; i < CIRCLE_NUM; i++) {\n      const circle = renderCircle(i);\n      circles.push(circle);\n    }\n    return circles;\n  };\n  const handleClick = id => {\n    //console.log(\"Clicked\" + id);\n    // const newGameState = [...gameState]; // copy of the array of game state\n    // newGameState[id] = currentPlayer; \n    // setGameState(newGameState);\n\n    if (isWinner(gameBoard, id, currentPlayer)) {\n      setGameState(GAME_STATE_WIN);\n    }\n    setGameBoard(gameBoard => {\n      return gameBoard.map((value, index) => {\n        if (index === id) {\n          return currentPlayer;\n        }\n        return value;\n      });\n    }); // state is updated asynchronously, so we need to pass a function to setGameBoard\n\n    setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n  };\n\n  const renderCircle = id => {\n    return /*#__PURE__*/_jsxDEV(GameCircle, {\n      id: id,\n      className: `player_${gameBoard[id]}`,\n      onCircleClicked: handleClick\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      player: currentPlayer,\n      gameState: gameState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoard\",\n      children: initBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n};\n_s(GameBoard, \"fst3Xl/097qlJDdGceWFyEi6NKk=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","ReactDOM","GameCircle","Header","Footer","isWinner","NO_PLAYER","PLAYER_1","PLAYER_2","CIRCLE_NUM","GAME_STATE_PLAYING","jsxDEV","_jsxDEV","Fragment","_Fragment","GameBoard","_s","gameBoard","setGameBoard","useState","Array","fill","currentPlayer","setCurrentPlayer","gameState","setGameState","initBoard","circles","i","circle","renderCircle","push","handleClick","id","GAME_STATE_WIN","map","value","index","className","onCircleClicked","fileName","_jsxFileName","lineNumber","columnNumber","children","player","_c","$RefreshReg$"],"sources":["/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js"],"sourcesContent":["import React  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css'\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { isWinner } from \"../helper\";\nimport  {NO_PLAYER, PLAYER_1, PLAYER_2,CIRCLE_NUM, GAME_STATE_PLAYING} from \"../Constants\";\n\n\nconst GameBoard = () => {\n   const [gameBoard, setGameBoard] = React.useState(Array(16).fill(NO_PLAYER));\n   const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n   const [gameState, setGameState] = React.useState(GAME_STATE_PLAYING);\n\n   const initBoard = () => {\n      const circles = [];\n      for (let i = 0; i < CIRCLE_NUM; i++) {\n         const circle = renderCircle(i);\n         circles.push(circle);\n      }\n      return circles;\n   }\n\n   const handleClick = (id) => {\n      //console.log(\"Clicked\" + id);\n      // const newGameState = [...gameState]; // copy of the array of game state\n      // newGameState[id] = currentPlayer; \n      // setGameState(newGameState);\n\n      if(isWinner(gameBoard,id,currentPlayer)) {\n         setGameState(GAME_STATE_WIN);\n      }\n\n      setGameBoard((gameBoard) => {return gameBoard.map((value, index) => {\n         if (index === id) {return currentPlayer;}\n         return value;}\n      )}); // state is updated asynchronously, so we need to pass a function to setGameBoard\n\n      setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n   }\n\n   const renderCircle = (id) => {\n      return <GameCircle key={id} id={id} className={`player_${gameBoard[id]}`} onCircleClicked={handleClick}>\n               \n            </GameCircle>\n   }\n\n    return(\n      <>\n         <Header player={currentPlayer} gameState={gameState}/>\n         <div className=\"gameBoard\">\n            {initBoard()}\n         </div>\n         <Footer/>\n      </>\n    );\n }\n\n export default GameBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}