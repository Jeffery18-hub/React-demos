{"ast":null,"code":"var _jsxFileName = \"/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { isWinner } from \"../helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NO_PLAYER = 0;\nconst PLAYER_1 = 1;\nconst PLAYER_2 = 2;\nconst CIRCLE_NUM = 16;\nconst GameBoard = () => {\n  _s();\n  const [gameBoard, setGameBoard] = React.useState(Array(16).fill(NO_PLAYER));\n  const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n  const initBoard = () => {\n    const circles = [];\n    for (let i = 0; i < CIRCLE_NUM; i++) {\n      const circle = renderCircle(i);\n      circles.push(circle);\n    }\n    return circles;\n  };\n  const handleClick = id => {\n    //console.log(\"Clicked\" + id);\n    // const newGameState = [...gameState]; // copy of the array of game state\n    // newGameState[id] = currentPlayer; \n    // setGameState(newGameState);\n\n    if (isWinner(gameBoard)) {\n      console.log(\"Winner\");\n    }\n    setGameBoard(gameState => {\n      return gameState.map((value, index) => {\n        if (index === id) {\n          return currentPlayer;\n        }\n        return value;\n      });\n    });\n    setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n  };\n\n  const renderCircle = id => {\n    return /*#__PURE__*/_jsxDEV(GameCircle, {\n      id: id,\n      className: `player_${gameBoard[id]}`,\n      onCircleClicked: handleClick\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 14\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      player: currentPlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoard\",\n      children: initBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n};\n_s(GameBoard, \"ucjU81CCitYXziSN2P3/T0L1Cvg=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","ReactDOM","GameCircle","Header","Footer","isWinner","jsxDEV","_jsxDEV","Fragment","_Fragment","NO_PLAYER","PLAYER_1","PLAYER_2","CIRCLE_NUM","GameBoard","_s","gameBoard","setGameBoard","useState","Array","fill","currentPlayer","setCurrentPlayer","initBoard","circles","i","circle","renderCircle","push","handleClick","id","console","log","gameState","map","value","index","className","onCircleClicked","fileName","_jsxFileName","lineNumber","columnNumber","children","player","_c","$RefreshReg$"],"sources":["/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js"],"sourcesContent":["import React  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css'\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { isWinner } from \"../helper\";\n\nconst NO_PLAYER = 0;\nconst PLAYER_1 = 1;\nconst PLAYER_2 = 2;\nconst CIRCLE_NUM =16;\n\nconst GameBoard = () => {\n   const [gameBoard, setGameBoard] = React.useState(Array(16).fill(NO_PLAYER));\n   const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n\n   const initBoard = () => {\n      const circles = [];\n      for (let i = 0; i < CIRCLE_NUM; i++) {\n         const circle = renderCircle(i);\n         circles.push(circle);\n      }\n      return circles;\n   }\n\n   const handleClick = (id) => {\n      //console.log(\"Clicked\" + id);\n      // const newGameState = [...gameState]; // copy of the array of game state\n      // newGameState[id] = currentPlayer; \n      // setGameState(newGameState);\n\n      if(isWinner(gameBoard)) {\n         console.log(\"Winner\");\n      }\n\n      setGameBoard((gameState) => {return gameState.map((value, index) => {\n         if (index === id) {return currentPlayer;}\n         return value;}\n      )});\n\n      setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n   }\n\n   const renderCircle = (id) => {\n      return <GameCircle key={id} id={id} className={`player_${gameBoard[id]}`} onCircleClicked={handleClick}>\n               \n            </GameCircle>\n   }\n\n    return(\n      <>\n         <Header player={currentPlayer}/>\n         <div className=\"gameBoard\">\n            {initBoard()}\n         </div>\n         <Footer/>\n      </>\n    );\n }\n\n export default GameBoard;"],"mappings":";;AAAA,OAAOA,KAAK,MAAO,OAAO;AAC1B,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,aAAa;AACpB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,QAAQ,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,UAAU,GAAE,EAAE;AAEpB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,KAAK,CAACkB,QAAQ,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAACV,SAAS,CAAC,CAAC;EAC3E,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,KAAK,CAACkB,QAAQ,CAACP,QAAQ,CAAC;EAElE,MAAMY,SAAS,GAAGA,CAAA,KAAM;IACrB,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,UAAU,EAAEY,CAAC,EAAE,EAAE;MAClC,MAAMC,MAAM,GAAGC,YAAY,CAACF,CAAC,CAAC;MAC9BD,OAAO,CAACI,IAAI,CAACF,MAAM,CAAC;IACvB;IACA,OAAOF,OAAO;EACjB,CAAC;EAED,MAAMK,WAAW,GAAIC,EAAE,IAAK;IACzB;IACA;IACA;IACA;;IAEA,IAAGzB,QAAQ,CAACW,SAAS,CAAC,EAAE;MACrBe,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACxB;IAEAf,YAAY,CAAEgB,SAAS,IAAK;MAAC,OAAOA,SAAS,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QACjE,IAAIA,KAAK,KAAKN,EAAE,EAAE;UAAC,OAAOT,aAAa;QAAC;QACxC,OAAOc,KAAK;MAAC,CAChB,CAAC;IAAA,CAAC,CAAC;IAEHb,gBAAgB,CAACD,aAAa,KAAKV,QAAQ,GAAGC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,CAAC;EACvE,CAAC;;EAED,MAAMgB,YAAY,GAAIG,EAAE,IAAK;IAC1B,oBAAOvB,OAAA,CAACL,UAAU;MAAU4B,EAAE,EAAEA,EAAG;MAACO,SAAS,EAAG,UAASrB,SAAS,CAACc,EAAE,CAAE,EAAE;MAACQ,eAAe,EAAET;IAAY,GAA/EC,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAER,CAAC;EACtB,CAAC;EAEA,oBACEnC,OAAA,CAAAE,SAAA;IAAAkC,QAAA,gBACGpC,OAAA,CAACJ,MAAM;MAACyC,MAAM,EAAEvB;IAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChCnC,OAAA;MAAK8B,SAAS,EAAC,WAAW;MAAAM,QAAA,EACtBpB,SAAS,CAAC;IAAC;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACNnC,OAAA,CAACH,MAAM;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eACV,CAAC;AAER,CAAC;AAAA3B,EAAA,CA9CID,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAgDd,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}