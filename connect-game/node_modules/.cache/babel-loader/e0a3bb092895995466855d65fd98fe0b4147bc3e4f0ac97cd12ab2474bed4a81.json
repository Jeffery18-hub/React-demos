{"ast":null,"code":"var _jsxFileName = \"/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NO_PLAYER = 0;\nconst PLAYER_1 = 1;\nconst PLAYER_2 = 2;\nconst CIRCLE_NUM = 16;\nconst GameBoard = () => {\n  _s();\n  const [gameState, setGameState] = React.useState(Array(16).fill(0));\n  const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n\n  //console.log(\"GameBoard\", gameState);\n  const initiBoard = () => {\n    const circles = [];\n    for (let i = 0; i < CIRCLE_NUM; i++) {\n      const circle = renderCircle(i);\n      circles.push(circle);\n    }\n    return circles;\n  };\n  const handleClick = id => {\n    //console.log(\"Clicked\" + id);\n    // const newGameState = [...gameState]; // copy of the array of game state\n    // newGameState[id] = currentPlayer; \n    // setGameState(newGameState);\n    setGameState(gameState => {\n      return gameState.map((value, index) => {\n        if (index === id) {\n          return currentPlayer;\n        }\n        return value;\n      });\n    });\n    setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n  };\n\n  const rederCirlce = id => {\n    return /*#__PURE__*/_jsxDEV(GameCircle, {\n      id: id,\n      className: `player_${gameState[id]}`,\n      onCircleClicked: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameBoard\",\n    children: initiBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n_s(GameBoard, \"JzWvB765y60A9hRVPfI0GcJCQs4=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","ReactDOM","GameCircle","jsxDEV","_jsxDEV","NO_PLAYER","PLAYER_1","PLAYER_2","CIRCLE_NUM","GameBoard","_s","gameState","setGameState","useState","Array","fill","currentPlayer","setCurrentPlayer","initiBoard","circles","i","circle","renderCircle","push","handleClick","id","map","value","index","rederCirlce","className","onCircleClicked","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js"],"sourcesContent":["import React  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css'\n\nconst NO_PLAYER = 0;\nconst PLAYER_1 = 1;\nconst PLAYER_2 = 2;\nconst CIRCLE_NUM =16;\n\nconst GameBoard = () => {\n   const [gameState, setGameState] = React.useState(Array(16).fill(0));\n   const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n\n   //console.log(\"GameBoard\", gameState);\n   const initiBoard = () => {\n      const circles = [];\n      for (let i = 0; i < CIRCLE_NUM; i++) {\n         const circle = renderCircle(i);\n         circles.push(circle);\n      }\n      return circles;\n   }\n\n   const handleClick = (id) => {\n      //console.log(\"Clicked\" + id);\n      // const newGameState = [...gameState]; // copy of the array of game state\n      // newGameState[id] = currentPlayer; \n      // setGameState(newGameState);\n      setGameState((gameState) => {return gameState.map((value, index) => {\n         if (index === id) {return currentPlayer;}\n         return value;}\n      )});\n\n      setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n   }\n\n   const rederCirlce = (id) => {\n      return <GameCircle id={id} className={`player_${gameState[id]}`} onCircleClicked={handleClick}>\n               \n            </GameCircle>\n   }\n\n    return(\n         <div className=\"gameBoard\">\n            {initiBoard}\n         </div>\n    );\n }\n\n export default GameBoard;"],"mappings":";;AAAA,OAAOA,KAAK,MAAO,OAAO;AAC1B,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,UAAU,GAAE,EAAE;AAEpB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EACnE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,KAAK,CAACa,QAAQ,CAACP,QAAQ,CAAC;;EAElE;EACA,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACtB,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,UAAU,EAAEY,CAAC,EAAE,EAAE;MAClC,MAAMC,MAAM,GAAGC,YAAY,CAACF,CAAC,CAAC;MAC9BD,OAAO,CAACI,IAAI,CAACF,MAAM,CAAC;IACvB;IACA,OAAOF,OAAO;EACjB,CAAC;EAED,MAAMK,WAAW,GAAIC,EAAE,IAAK;IACzB;IACA;IACA;IACA;IACAb,YAAY,CAAED,SAAS,IAAK;MAAC,OAAOA,SAAS,CAACe,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QACjE,IAAIA,KAAK,KAAKH,EAAE,EAAE;UAAC,OAAOT,aAAa;QAAC;QACxC,OAAOW,KAAK;MAAC,CAChB,CAAC;IAAA,CAAC,CAAC;IAEHV,gBAAgB,CAACD,aAAa,KAAKV,QAAQ,GAAGC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,CAAC;EACvE,CAAC;;EAED,MAAMuB,WAAW,GAAIJ,EAAE,IAAK;IACzB,oBAAOrB,OAAA,CAACF,UAAU;MAACuB,EAAE,EAAEA,EAAG;MAACK,SAAS,EAAG,UAASnB,SAAS,CAACc,EAAE,CAAE,EAAE;MAACM,eAAe,EAAEP;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE5E,CAAC;EACtB,CAAC;EAEA,oBACK/B,OAAA;IAAK0B,SAAS,EAAC,WAAW;IAAAM,QAAA,EACtBlB;EAAU;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd,CAAC;AAAAzB,EAAA,CAtCID,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAwCd,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}