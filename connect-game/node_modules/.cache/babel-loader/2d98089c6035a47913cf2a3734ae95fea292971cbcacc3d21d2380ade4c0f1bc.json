{"ast":null,"code":"import _slicedToArray from\"/Users/tacodaddy/learnReact/connect-game/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import GameCircle from\"./GameCircle\";import'../Game.css';import Header from\"./Header\";import Footer from\"./Footer\";import{isDraw,isWinner,getSuggestMove}from\"../helper\";import{NO_PLAYER,PLAYER_1,PLAYER_2,CIRCLE_NUM,GAME_STATE_PLAYING,GAME_STATE_WIN,GAME_STATE_DRAW}from\"../Constants\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GameBoard=function GameBoard(){var _React$useState=React.useState(Array(16).fill(NO_PLAYER)),_React$useState2=_slicedToArray(_React$useState,2),gameBoard=_React$useState2[0],setGameBoard=_React$useState2[1];var _React$useState3=React.useState(PLAYER_1),_React$useState4=_slicedToArray(_React$useState3,2),currentPlayer=_React$useState4[0],setCurrentPlayer=_React$useState4[1];var _React$useState5=React.useState(GAME_STATE_PLAYING),_React$useState6=_slicedToArray(_React$useState5,2),gameState=_React$useState6[0],setGameState=_React$useState6[1];var _React$useState7=React.useState(NO_PLAYER),_React$useState8=_slicedToArray(_React$useState7,2),winPlayer=_React$useState8[0],setWinPlayer=_React$useState8[1];var initGame=function initGame(){console.log(\"initGame\");setGameBoard(Array(16).fill(NO_PLAYER));setCurrentPlayer(PLAYER_1);setGameState(GAME_STATE_PLAYING);setWinPlayer(NO_PLAYER);};React.useEffect(function(){initGame();},[]);var initBoard=function initBoard(){var circles=[];for(var i=0;i<CIRCLE_NUM;i++){var circle=renderCircle(i);circles.push(circle);}return circles;};var onSuggestClick=function onSuggestClick(){var suggestMove=getSuggestMove(gameBoard);handleClick(suggestMove);};var handleClick=function handleClick(id){//console.log(\"Clicked\" + id);\n// const newGameState = [...gameState]; // copy of the array of game state\n// newGameState[id] = currentPlayer; \n// setGameState(newGameState);\nif(gameBoard[id]!==NO_PLAYER)return;// if the circle is already clicked, return\nif(gameState!==GAME_STATE_PLAYING)return;// if the game is not playing, return\nif(isWinner(gameBoard,id,currentPlayer)){setGameState(GAME_STATE_WIN);setWinPlayer(currentPlayer);}if(isDraw(gameBoard,id,currentPlayer)){setGameState(GAME_STATE_DRAW);setWinPlayer(NO_PLAYER);}setGameBoard(function(gameBoard){return gameBoard.map(function(value,index){if(index===id){return currentPlayer;}return value;});});// state is updated asynchronously, so we need to pass a function to setGameBoard\nsetCurrentPlayer(currentPlayer===PLAYER_1?PLAYER_2:PLAYER_1);// primitive value, so no need to copy\n};var renderCircle=function renderCircle(id){return/*#__PURE__*/_jsx(GameCircle,{id:id,className:\"player_\".concat(gameBoard[id]),onCircleClicked:handleClick},id);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{currentPlayer:currentPlayer,winPlayer:winPlayer,gameState:gameState}),/*#__PURE__*/_jsx(\"div\",{className:\"gameBoard\",children:initBoard()}),/*#__PURE__*/_jsx(Footer,{onNewGameClick:initGame,onSuggestClick:onSuggestClick,gameState:gameState})]});};export default GameBoard;","map":{"version":3,"names":["React","GameCircle","Header","Footer","isDraw","isWinner","getSuggestMove","NO_PLAYER","PLAYER_1","PLAYER_2","CIRCLE_NUM","GAME_STATE_PLAYING","GAME_STATE_WIN","GAME_STATE_DRAW","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","GameBoard","_React$useState","useState","Array","fill","_React$useState2","_slicedToArray","gameBoard","setGameBoard","_React$useState3","_React$useState4","currentPlayer","setCurrentPlayer","_React$useState5","_React$useState6","gameState","setGameState","_React$useState7","_React$useState8","winPlayer","setWinPlayer","initGame","console","log","useEffect","initBoard","circles","i","circle","renderCircle","push","onSuggestClick","suggestMove","handleClick","id","map","value","index","className","concat","onCircleClicked","children","onNewGameClick"],"sources":["/Users/tacodaddy/learnReact/connect-game/src/components/GameBoard.js"],"sourcesContent":["import React  from \"react\";\nimport GameCircle from \"./GameCircle\";\nimport '../Game.css'\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { isDraw, isWinner, getSuggestMove } from \"../helper\";\nimport  {NO_PLAYER, PLAYER_1, PLAYER_2,CIRCLE_NUM, GAME_STATE_PLAYING,GAME_STATE_WIN, GAME_STATE_DRAW} from \"../Constants\";\n\n\nconst GameBoard = () => {\n   const [gameBoard, setGameBoard] = React.useState(Array(16).fill(NO_PLAYER));\n   const [currentPlayer, setCurrentPlayer] = React.useState(PLAYER_1);\n   const [gameState, setGameState] = React.useState(GAME_STATE_PLAYING);\n   const [winPlayer, setWinPlayer] = React.useState(NO_PLAYER);\n\n   const initGame = () => {\n      console.log(\"initGame\");\n      setGameBoard(Array(16).fill(NO_PLAYER));\n      setCurrentPlayer(PLAYER_1);\n      setGameState(GAME_STATE_PLAYING);\n      setWinPlayer(NO_PLAYER);\n   }\n\n   React.useEffect(() => {initGame()}, []);\n\n   const initBoard = () => {\n      const circles = [];\n      for (let i = 0; i < CIRCLE_NUM; i++) {\n         const circle = renderCircle(i);\n         circles.push(circle);\n      }\n      return circles;\n   }\n\n   const onSuggestClick = () => {\n      const suggestMove = getSuggestMove(gameBoard);\n      handleClick(suggestMove);\n   }\n\n   const handleClick = (id) => {\n      //console.log(\"Clicked\" + id);\n      // const newGameState = [...gameState]; // copy of the array of game state\n      // newGameState[id] = currentPlayer; \n      // setGameState(newGameState);\n\n      if(gameBoard[id] !== NO_PLAYER) return; // if the circle is already clicked, return\n      if(gameState !== GAME_STATE_PLAYING) return; // if the game is not playing, return\n\n      if(isWinner(gameBoard,id,currentPlayer)) {\n         setGameState(GAME_STATE_WIN);\n         setWinPlayer(currentPlayer);\n      }\n\n      if(isDraw(gameBoard,id,currentPlayer)) {\n         setGameState(GAME_STATE_DRAW);\n         setWinPlayer(NO_PLAYER);\n      }\n\n      setGameBoard((gameBoard) => {return gameBoard.map((value, index) => {\n         if (index === id) {return currentPlayer;}\n         return value;}\n      )}); // state is updated asynchronously, so we need to pass a function to setGameBoard\n\n      setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1); // primitive value, so no need to copy\n   }\n\n   const renderCircle = (id) => {\n      return <GameCircle key={id} id={id} className={`player_${gameBoard[id]}`} onCircleClicked={handleClick}>\n               \n            </GameCircle>\n   }\n\n    return(\n      <>\n         <Header currentPlayer={currentPlayer} winPlayer={winPlayer} gameState={gameState}/>\n         <div className=\"gameBoard\">\n            {initBoard()}\n         </div>\n         <Footer onNewGameClick={initGame} onSuggestClick={onSuggestClick} gameState={gameState}/>\n      </>\n    );\n }\n\n export default GameBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}